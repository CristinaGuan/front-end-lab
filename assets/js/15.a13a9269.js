(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{393:function(t,a,s){"use strict";s.r(a);var e=s(27),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#git"}},[t._v("Git")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%e6%8f%90%e4%ba%a4%e6%b5%81%e7%a8%8b"}},[t._v("提交流程")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#add"}},[t._v("Add")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#commit"}},[t._v("Commit")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%e6%92%a4%e9%94%80%e8%bf%98%e6%b2%a1-push-%e5%88%b0%e8%bf%9c%e7%a8%8b%e7%9a%84-commit"}},[t._v("撤销还没 push 到远程的 commit")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%e6%92%a4%e9%94%80%e5%b7%b2%e7%bb%8f-push-%e5%88%b0%e8%bf%9c%e7%ab%af%e7%9a%84-commit"}},[t._v("撤销已经 push 到远端的 commit")])])])]),t._v(" "),s("li",[s("a",{attrs:{href:"#branch-and-tag"}},[t._v("branch and tag")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#history"}},[t._v("history")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#remote"}},[t._v("remote")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%e5%90%88%e5%b9%b6%e4%b8%a4%e4%b8%aa%e4%b8%8d%e5%90%8c%e4%bb%93%e5%ba%93%e7%9a%84-commit"}},[t._v("合并两个不同仓库的 commit")])])])]),t._v(" "),s("li",[s("a",{attrs:{href:"#guide"}},[t._v("Guide")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%e8%a7%a3%e5%86%b3git%e7%9b%ae%e5%bd%95%e8%bf%87%e5%a4%a7%e7%9a%84%e9%97%ae%e9%a2%98"}},[t._v("解决.git目录过大的问题")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%e5%88%9d%e5%a7%8b%e5%8c%96%e8%bf%9c%e7%a8%8b%e4%bb%93%e5%ba%93"}},[t._v("初始化远程仓库")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%e6%b8%85%e7%a9%ba%e9%a1%b9%e7%9b%ae%e7%9a%84-commit-%e8%ae%b0%e5%bd%95"}},[t._v("清空项目的 commit 记录")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%e6%92%a4%e9%94%80%e4%bf%ae%e6%94%b9"}},[t._v("撤销修改")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%e6%96%87%e4%bb%b6%e5%a4%b9%e5%a4%a7%e5%b0%8f%e5%86%99%e5%88%87%e6%8d%a2"}},[t._v("文件夹大小写切换")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%e4%bf%9d%e7%95%99%e7%a9%ba%e7%9a%84%e6%96%87%e4%bb%b6%e5%a4%b9"}},[t._v("保留空的文件夹")])])])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%e5%b8%b8%e8%a7%81%e9%94%99%e8%af%af"}},[t._v("常见错误")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%e5%85%b6%e4%bb%96"}},[t._v("其他")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%e6%9f%a5%e7%9c%8b%e4%bb%93%e5%ba%93%e6%8f%90%e4%ba%a4%e8%80%85%e7%9a%84%e7%bb%9f%e8%ae%a1"}},[t._v("查看仓库提交者的统计")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%e6%9b%b4%e6%94%b9%e9%a1%b9%e7%9b%ae%e4%b8%ad%e4%bd%9c%e8%80%85%e4%bf%a1%e6%81%af"}},[t._v("更改项目中作者信息")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#vim-%e5%b8%b8%e7%94%a8%e5%91%bd%e4%bb%a4"}},[t._v("vim 常用命令")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%e6%89%a9%e5%b1%95%e9%98%85%e8%af%bb"}},[t._v("扩展阅读")])])])])])])]),t._v(" "),s("details",[s("summary",[t._v("常见术语解释")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("术语")]),t._v(" "),s("th",[t._v("解释")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("origin")]),t._v(" "),s("td",[t._v("默认远端仓库")])]),t._v(" "),s("tr",[s("td",[t._v("master")]),t._v(" "),s("td",[t._v("默认开发分支")])]),t._v(" "),s("tr",[s("td",[t._v("HEAD")]),t._v(" "),s("td",[t._v("默认开发分支")])]),t._v(" "),s("tr",[s("td",[t._v("HEAD^")]),t._v(" "),s("td",[s("code",[t._v("HEAD")]),t._v("父提交")])]),t._v(" "),s("tr",[s("td",[t._v("tracked")]),t._v(" "),s("td",[s("code",[t._v("git")]),t._v("已经追踪文件的修改")])]),t._v(" "),s("tr",[s("td",[t._v("untracked")]),t._v(" "),s("td",[t._v("未跟踪的状态，也就是"),s("code",[t._v("git")]),t._v("不认识的新的文件")])]),t._v(" "),s("tr",[s("td",[t._v("revert")]),t._v(" "),s("td",[t._v("回退")])])])])]),t._v(" "),s("h2",{attrs:{id:"提交流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提交流程"}},[t._v("#")]),t._v(" 提交流程")]),t._v(" "),s("p",[t._v("日常提交流程")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 跟踪改动过的文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# `git add <file>` or")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# `git add -A` or")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加 commit 信息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 不同团队有不同的编写 commit 信息规范，有的项目依赖 commit 的格式来做自动化处理")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 常见格式如： `<action> <desc content>`")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fix: message commit"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从远程仓库拉取代码，查看是否有冲突")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 直接 git pull 可能会有冲突，可采用 rebase 代替默认的 merge 策略减少多余的 commit 提交")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull --rebase\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交改动至默认的远程仓库")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or 同时提交改动至指定远程仓库(orgin)和分支(develop, master)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin master develop\n")])])]),s("h2",{attrs:{id:"add"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#add"}},[t._v("#")]),t._v(" Add")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("方法")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("git add "),s("code",[t._v("<change file>")])]),t._v(" "),s("td",[t._v("git add "),s("code",[t._v("<change file>")]),t._v("将其添加到 status")])]),t._v(" "),s("tr",[s("td",[t._v("git add [--all / .]")]),t._v(" "),s("td",[t._v("添加全部改动的文件")])])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commit"}},[t._v("#")]),t._v(" Commit")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("方法")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v('git commit -m "'),s("code",[t._v("<message>")]),t._v('"')]),t._v(" "),s("td",[t._v("为已经进入"),s("code",[t._v("stage(暂存的更改)")]),t._v("添加"),s("code",[t._v("commit")]),t._v("信息")])]),t._v(" "),s("tr",[s("td",[t._v("git commit --amend")]),t._v(" "),s("td",[t._v("修改上一次提交的"),s("code",[t._v("commit")]),t._v("信息")])])])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"撤销还没-push-到远程的-commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#撤销还没-push-到远程的-commit"}},[t._v("#")]),t._v(" 撤销还没 push 到远程的 commit")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 找到需要撤销的 commit 的`前一个` commit_hash(这步可以理解为找到定位的节点")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# bash 的 commit 顺序是从上(最新 commit)至下的顺序")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --online\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 撤销 commit, 将代码恢复为前一个版本(会丢失修改的代码)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard commit_hash\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or 完成 commit 撤销，可以重新提交 commit(不会丢失修改的代码)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset commit_hash\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果只 commit 了一次，想给回退到 commit 前上一个版本的话，还可以用`HEAD`代替`hash`(不会丢失修改的代码)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# HEAD    就是本次的版本")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# HEAD~1  就是上一次的版本")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD~1\n")])])]),s("h3",{attrs:{id:"撤销已经-push-到远端的-commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#撤销已经-push-到远端的-commit"}},[t._v("#")]),t._v(" 撤销已经 push 到远端的 commit")]),t._v(" "),s("p",[t._v("在使用"),s("code",[t._v("git")]),t._v("时，有时候我们会无意间错推了我们不想推上去的文件或者希望能够回退以前版本的时候.\n这时我们可以先在本地回退到相应的版本。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 注意使用 --hard 参数会抛弃当前工作区的修改")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用 --soft 参数的话会回退到之前的版本，但是保留当前工作区的修改，可以重新提交")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("版本号"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("为了覆盖掉远端的版本信息，使远端的仓库也回退到相应的版本，需要加上参数"),s("code",[t._v("--force")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# branch: 分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" --force\n")])])]),s("hr"),t._v(" "),s("h2",{attrs:{id:"branch-and-tag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#branch-and-tag"}},[t._v("#")]),t._v(" branch and tag")]),t._v(" "),s("p",[t._v("常用的分支和标签命令")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git checkout <branch/tag> 切换指定的分支或标签")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout develop\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换名为 gh-pages 的分支, 如果不存在这个分支就创建它")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gh-pages"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看所有标签")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 基于最新提交的分支创建标签")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tagname"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除指定标签")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tagname"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使当前的分支和远程仓库 `origin2/game` 建立关联（前提是目标分支要存在）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 建立关联后就可以直接使用 `git push` 命令而无需添加其他参数。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --set-upstream-to orgin2/game\n")])])]),s("h2",{attrs:{id:"history"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#history"}},[t._v("#")]),t._v(" history")]),t._v(" "),s("p",[t._v("查看 "),s("code",[t._v("git")]),t._v(" 历史")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看提交历史")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用更简洁的模式查看提交历史")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --oneline\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看指定文件的提交历史")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log -p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("file"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 以列表的方式查看指定文件的提交历史")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" blame "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("file"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("hr"),t._v(" "),s("h2",{attrs:{id:"remote"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#remote"}},[t._v("#")]),t._v(" remote")]),t._v(" "),s("p",[t._v("添加一个远程仓库")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" orgin "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("remote"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n")])])]),s("p",[t._v("将本地分支推送到存在依赖关系的远端分支，如果远端没有"),s("code",[t._v("master")]),t._v("分支，那会新建一个")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin master\n")])])]),s("p",[t._v("推送当前分支并建立与远程上游的跟踪")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push --set-upstream origin master\n")])])]),s("p",[t._v("设置上游并推送至远程的"),s("code",[t._v("master")]),t._v("分支")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin master\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin master\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --set-upstream-to orgin/master\n")])])]),s("h3",{attrs:{id:"合并两个不同仓库的-commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合并两个不同仓库的-commit"}},[t._v("#")]),t._v(" 合并两个不同仓库的 commit")]),t._v(" "),s("p",[t._v("首先我们有两个仓库: "),s("code",[t._v("repo1")]),t._v(" 和 "),s("code",[t._v("repo2")]),t._v(". "),s("code",[t._v("repo1")]),t._v(" 是我们想要保留的仓库：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加远程地址")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" repo2 git@github.com:anran758/repo2.git\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拉取代码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch repo2\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换至 master 分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 合并 repo2 的 master")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 由于两个 master 分支的 commit 会有所不同，此时需要添加：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --allow-unrelated-histories, 允许 git 合并不相关的历史，其余有冲突让我们手动确认")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge repo2/master --allow-unrelated-histories\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 合并冲突、后提交 commit")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"chg: 合并两个仓库的历史"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n")])])]),s("h2",{attrs:{id:"guide"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#guide"}},[t._v("#")]),t._v(" Guide")]),t._v(" "),s("h3",{attrs:{id:"解决-git目录过大的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决-git目录过大的问题"}},[t._v("#")]),t._v(" 解决.git目录过大的问题")]),t._v(" "),s("details",[s("summary",[t._v("Click show content")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://www.zhihu.com/question/29769130/answer/315745139",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何解决 GitHub 提交次数过多 .git 文件过大的问题？ - 作者：郑宇"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("项目中上传了一些很大的文件(文件过大在"),s("code",[t._v("git cached")]),t._v("中占用了很大空间，可能是几百M)，经过了一段时间后又将这些文件移除，并且确定不在使用后，可以使用下面命令在树中移除它:")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("运行 gc ，生成 pack 文件（后面的 --prune=now 表示对之前的所有提交做修剪，有的时候仅仅 gc 一下.git 文件就会小很多）")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" gc --prune"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("now\n")])])])]),t._v(" "),s("li",[s("p",[t._v("找出最大的三个文件（看自己需要）")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" verify-pack -v .git/objects/pack/*.idx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),t._v(" -k "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" -n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tail")]),t._v(" -3\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 示例输出：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#1debc758cf31a649c2fc5b0c59ea1b7f01416636 blob   4925660 3655422 14351")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#c43a8da9476f97e84b52e0b34034f8c2d93b4d90 blob   154188651 152549294 12546842")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#2272096493d061489349e0a312df00dcd0ec19a2 blob   155414465 153754005 1650961363")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("查看那些大文件究竟是谁（c43a8da 是上面大文件的hash码）")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rev-list --objects --all "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" c43a8da\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# c43a8da9476f97e84b52e0b34034f8c2d93b4d90 data/bigfile")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("使用"),s("code",[t._v("git filter-branch")]),t._v("移除对文件的引用重写分支。因为我想删除的是一个目录("),s("code",[t._v("Books")]),t._v(")，因此需要加上递归("),s("code",[t._v("-r")]),t._v(")来移除"),s("code",[t._v("Book")]),t._v("文件夹下的文件.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" filter-branch --index-filter  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git rm -r --cached --ignore-unmatch Books'")]),t._v(" --prune-empty --tag-name-filter "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" --force -- --all\n")])])])]),t._v(" "),s("li",[s("p",[t._v("进行 "),s("code",[t._v("repack")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" for-each-ref --format"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'delete %(refname)'")]),t._v(" refs/original "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" update-ref --stdin\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reflog expire --expire"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("now --all\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" gc --prune"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("now\n")])])])]),t._v(" "),s("li",[s("p",[t._v("查看 pack 的空间使用情况")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" count-objects -v\n")])])])])])]),t._v(" "),s("h3",{attrs:{id:"初始化远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化远程仓库"}},[t._v("#")]),t._v(" 初始化远程仓库")]),t._v(" "),s("details",[s("summary",[t._v("Click show content")]),t._v(" "),s("p",[t._v("假设你已经在远程储存库上创建了新的库("),s("code",[t._v("test")]),t._v(")，此时需要将本地项目的代码关联并推送到远程仓库上去:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 初始化 git")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加全部改动")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加 commit 信息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"init message"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加远程地址，提交代码至远程，并设置为追踪分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin git@github.com:anran758/test.git\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin master\n")])])])]),t._v(" "),s("h3",{attrs:{id:"清空项目的-commit-记录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#清空项目的-commit-记录"}},[t._v("#")]),t._v(" 清空项目的 commit 记录")]),t._v(" "),s("p",[t._v("当一个项目已经存在久远，或者说"),s("code",[t._v("commit")]),t._v("记录有很多历史遗留的问题，分支线跟地铁图似得。此时你想重置 "),s("code",[t._v("git")]),t._v(" 线时，可以这样做:")]),t._v(" "),s("details",[s("summary",[t._v("Click show code")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 先从远端克隆一份仓库，不要在原先本地项目直接进行操作")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone git@github.com:anran758/test.git\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建一个临时分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout --orphan tmp\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在新的分支中添加全部文件进去，并提交 commit")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commit message"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -D master\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 此时所处于的分支在 tmp 分支， 将 tmp 更名为 master")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -m master\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 强制推入远程仓库即可")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -f origin master\n")])])])]),t._v(" "),s("h3",{attrs:{id:"撤销修改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#撤销修改"}},[t._v("#")]),t._v(" 撤销修改")]),t._v(" "),s("details",[s("summary",[t._v("Click show code")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只删除所有`untracked`的文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果文件已经被`tracked`, 修改过的文件不会被回退")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clean -df\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 把`tracked`的文件回退到前一个版本")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 对于`untracked`的文件(比如编译的临时文件)都不会被删除")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 撤销指定未提交的修改内容")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout HEAD "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("file"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])])]),t._v(" "),s("h3",{attrs:{id:"文件夹大小写切换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件夹大小写切换"}},[t._v("#")]),t._v(" 文件夹大小写切换")]),t._v(" "),s("details",[s("summary",[t._v("Click show content")]),t._v(" "),s("p",[t._v("如果你提交了一个文件夹名为"),s("code",[t._v("FOO")]),t._v("，然后你现在想修改为小写的"),s("code",[t._v("foo")]),t._v("时，你会发现直接修改文件名"),s("code",[t._v("git")]),t._v("是不识别的。因为在默认情况下，"),s("code",[t._v("git")]),t._v("是不区分文件名大小写。")]),t._v(" "),s("p",[t._v("这时有两个解决方法：")]),t._v(" "),s("p",[s("strong",[t._v("(不推荐)")]),t._v(" 直接设置 "),s("code",[t._v("git config")]),t._v(" 区分大小写，但弊端在不同平台下可能会引起别的问题。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置仓库的大小写敏感")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config core.ignorecase "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])])]),s("p",[s("strong",[t._v("(推荐)")]),t._v(" 通过 "),s("code",[t._v("git mv")]),t._v(" 方法来改名。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 回避系统对大小写的判定，先修改为其他的名字, git 会将修改自动添加到工作区上")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" FOO FOO1\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 再将名字修改回小写的状态，修改后的操作会自动添加到工作区上, 这样就完成了名字的修改")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" FOO1 foo\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交修改")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Modify dir name"')]),t._v("\n")])])])]),t._v(" "),s("h3",{attrs:{id:"保留空的文件夹"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#保留空的文件夹"}},[t._v("#")]),t._v(" 保留空的文件夹")]),t._v(" "),s("details",[s("summary",[t._v("Click show content")]),t._v(" "),s("p",[t._v("在默认情况下，"),s("code",[t._v("git")]),t._v(" 会忽略掉空的文件夹。如果想要保留这个文件夹的话，可以在里面创建一个名为"),s("code",[t._v(".gitkeep")]),t._v("的空文件(名字是社区约定形成，也可以使用其他名字，原理上只是占个坑).")]),t._v(" "),s("p",[t._v("不过"),s("code",[t._v("windows")]),t._v("平台下不能直接右键创建"),s("code",[t._v(".")]),t._v("开头的文件，系统会认为文件名不合法。这时需要使用命令行或者编辑器来完成创建。")])]),t._v(" "),s("h2",{attrs:{id:"常见错误"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见错误"}},[t._v("#")]),t._v(" 常见错误")]),t._v(" "),s("details",[s("summary",[t._v("常见错误")]),t._v(" "),s("p",[t._v("在执行"),s("code",[t._v("git pull origin master")]),t._v("命令时，无法"),s("code",[t._v("pull")]),t._v("的情况。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull\n$ fatal: refusing to merge unrelated histories\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 原因是说在 git 2.9版本后，需要加上这句 --allow-unrelated-histories。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin master --allow-unrelated-histories\n")])])]),s("hr"),t._v(" "),s("p",[t._v("使用"),s("code",[t._v("git pull")]),t._v("遇到合并"),s("code",[t._v("commit")]),t._v("时，此时并不想因为合并代码多产生一条"),s("code",[t._v("commit")]),t._v("记录，可以将"),s("code",[t._v("commit")]),t._v("信息注释掉，"),s("code",[t._v("shift + :wq")]),t._v("退出。")]),t._v(" "),s("p",[t._v("然后会因为自动合并失败后提示错误:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("Auto-merging pages/index/index.js\nerror: Empty commit message.\nNot committing merge"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" use "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git commit'")]),t._v(" to complete the merge.\n")])])]),s("p",[t._v("撤消合并并再次拉动，使用"),s("code",[t._v("rebase")]),t._v("解决冲突：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge --abort\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull --rebase\nFirst, rewinding "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("head")]),t._v(" to replay your work on "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("top")]),t._v(" of it"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\nApplying: fix: fixed something\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n")])])])]),t._v(" "),s("h2",{attrs:{id:"其他"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),s("h3",{attrs:{id:"查看仓库提交者的统计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看仓库提交者的统计"}},[t._v("#")]),t._v(" 查看仓库提交者的统计")]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看选项")]),t._v("\ngit shortlog --help\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 统计排除合并提交")]),t._v("\ngit shortlog -sn --no-merges\n")])])]),s("h3",{attrs:{id:"更改项目中作者信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更改项目中作者信息"}},[t._v("#")]),t._v(" 更改项目中作者信息")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://help.github.com/en/articles/changing-author-info",target:"_blank",rel:"noopener noreferrer"}},[t._v("git 更改作者信息"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("同样的方法还可以修改 commit 时间为作者时间:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" filter-branch --env-filter "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'GIT_COMMITTER_DATE="),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$GIT_AUTHOR_DATE")]),t._v("; export GIT_COMMITTER_DATE'")]),t._v("\n")])])]),s("h3",{attrs:{id:"vim-常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vim-常用命令"}},[t._v("#")]),t._v(" vim 常用命令")]),t._v(" "),s("p",[s("RouterLink",{attrs:{to:"/operations/#vim"}},[t._v("vim 常用命令")])],1),t._v(" "),s("h3",{attrs:{id:"扩展阅读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扩展阅读"}},[t._v("#")]),t._v(" 扩展阅读")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.blog/2020-04-09-github-protips-tips-tricks-hacks-and-secrets-from-lee-reilly",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub Protips: Tips, tricks, hacks, and secrets from Lee Reilly"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);